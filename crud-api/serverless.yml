service: crud-api
frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs18.x
  region: us-east-2  
  environment:
    TABLE_NAME: !Ref ItemsTable
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - !GetAtt ItemsTable.Arn

functions:
  createItem:
    handler: functions/create.handler
    events:
      - http:
          path: items
          method: post
          cors: true

  listItems:
    handler: functions/list.handler
    events:
      - http:
          path: items
          method: get
          cors: true

  getItem:
    handler: functions/get.handler
    events:
      - http:
          path: items/{id}
          method: get
          cors: true

  updateItem:
    handler: functions/update.handler
    events:
      - http:
          path: items/{id}
          method: put
          cors: true

  deleteItem:
    handler: functions/delete.handler
    events:
      - http:
          path: items/{id}
          method: delete
          cors: true

resources:
  Resources:
    TasksTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-tasks-${sls:stage}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
          - AttributeName: status
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: UserTasksIndex
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: status
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST

    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:service}-user-pool-${sls:stage}
        UsernameAttributes:
          - email
        AutoVerifiedAttributes:
          - email
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireUppercase: true
            RequireLowercase: true
            RequireNumbers: true
            RequireSymbols: false
        Schema:
          - Name: email
            AttributeDataType: String
            Mutable: false
            Required: true
          - Name: name
            AttributeDataType: String
            Mutable: true
            Required: true

    CognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: ${self:service}-user-pool-client-${sls:stage}
        UserPoolId: !Ref CognitoUserPool
        GenerateSecret: false
        ExplicitAuthFlows:
          - ADMIN_NO_SRP_AUTH
          - USER_PASSWORD_AUTH
        SupportedIdentityProviders:
          - COGNITO

  Outputs:
    TasksTableName:
      Value: !Ref TasksTable
      Export:
        Name: ${self:service}-${sls:stage}-TasksTableName
    
    UserPoolId:
      Value: !Ref CognitoUserPool
      Export:
        Name: ${self:service}-${sls:stage}-UserPoolId
    
    UserPoolClientId:
      Value: !Ref CognitoUserPoolClient
      Export:
        Name: ${self:service}-${sls:stage}-UserPoolClientId

